// 笨阶乘
// medium
/*
* 通常，正整数 n 的阶乘是所有小于或等于 n 的正整数的乘积。例如，factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1。
*
* 相反，我们设计了一个笨阶乘 clumsy：在整数的递减序列中，我们以一个固定顺序的操作符序列来依次替换原有的乘法操作符：乘法(*)，除法(/)，加法(+)和减法(-)。
*
* 例如，clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1。然而，这些运算仍然使用通常的算术运算顺序：我们在任何加、减步骤之前执行所有的乘法和除法步骤，并且按从左到右处理乘法和除法步骤。
*
* 另外，我们使用的除法是地板除法（floor division），所以 10 * 9 / 8 等于 11。这保证结果是一个整数。
*
* 实现上面定义的笨函数：给定一个整数 N，它返回 N 的笨阶乘。
*
*
* 示例 1：
*
* 输入：4
* 输出：7
* 解释：7 = 4 * 3 / 2 + 1
* 示例 2：
*
* 输入：10
* 输出：12
* 解释：12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1
*
*
* 提示：
*
* 1 <= N <= 10000
* -2^31 <= answer <= 2^31 - 1  （答案保证符合 32 位整数。）
*
* 来源：力扣（LeetCode）
* 链接：https://leetcode-cn.com/problems/clumsy-factorial
* 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*
* ----------------------------------------------------
* 题解：栈，数学
*
* 这题正常用栈就可以做，但是有更好的数学方法。
*
* 各个数字只是遵循 * / + - 的计算规律，看似没什么联系，但是观察 * / 计算的那几项
*
* 	N * (N - 1) / (N - 2)
* =>	(N^2 - 2N + N) / (N - 2)
* =>	N * (N - 2) + N / (N - 2)
* =>	N + N / (N - 2)
* => 	N + (N - 2 + 2) / (N - 2)
* =>	N + 1 + 2 / (N - 2)
*
* 最后一项 2/(N-2) 当 N > 4 时，int 除法向下取整的特性，最终将都等于 0，
* 那么 N*(N-1)/(N-2) 在 N > 4 时将等于 N+1，这个等式让这个多项式得以能够削项
*
* 比如 N(N−1)/(N−2) + (N−3) − (N−4)(N−5)/(N−6) + (N−7) − ...
* 当 N > 8，(N−4)(N−5)/(N−6) = N-3，可以前一项抹除，多项式的中间项可以相同方式削项，4个数为一组，
* 那么可以对 N 取模 4，分别考虑。
*
* 当余数为 0：
* 	N(N-1)/(N-2) +  ... - 8 * 7 / 6 + 5 - 4 * 3 / 2 + 1
* 	------------					  -----------------
* =>	N+1 + 5 - 6 + 1
* =>	N + 1
*
* 当余数为 1：
* 	N(N-1)/(N-2) +  ... - 9 * 8 / 7 + 6 - 5 * 4 / 3 + 2 - 1
* 	------------					  ---------------------
* =>	N+1 + 6 - 6 + 2 -1
* =>	N + 2
*
* 当余数为 2：
* 	N(N-1)/(N-2) +  ... - 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1
* 	------------					   -------------------------
* =>	N+1 + 7 - 7 + 3 - 2
* => 	N + 2
*
* 当余数为 3：
* 	N(N-1)/(N-2) +  ... - 11 * 10 / 9 + 8 - 7 * 6 / 5 + 4 - 3 * 2 / 1
* 	------------						-----------------------------
* => 	N+1 + 8 -8 + 4 - 6
* => 	N - 1
*
* 综上，再加上 N <= 4 时，单独计算下结果，就可以通过给定的 N 直接算得结果。
*
 */

package main

func main() {

}

func clumsy(N int) int {
	switch {
	case N == 1:
		return 1
	case N == 2:
		return 2
	case N == 3:
		return 6
	case N == 4:
		return 7
	case N%4 == 0:
		return N + 1
	case N%4 == 1 || N%4 == 2:
		return N + 2
	default: // N % 4 == 3
		return N - 1
	}
}
