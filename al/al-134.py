# 加油站
# medium
'''
在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。

你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。

如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。

说明: 

如果题目有解，该答案即为唯一答案。
输入数组均为非空数组，且长度相同。
输入数组中的元素均为非负数。

示例 1:

输入: 
gas  = [1,2,3,4,5]
cost = [3,4,5,1,2]

输出: 3

解释:
从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油
开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油
开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油
开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油
开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油
开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。
因此，3 可为起始索引。

示例 2:

输入: 
gas  = [2,3,4]
cost = [3,4,3]

输出: -1

解释:
你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。
我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油
开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油
开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油
你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。
因此，无论怎样，你都不可能绕环路行驶一周。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/gas-station
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

------------------------------------------------
题解：贪心
朴素想法，遍历一遍每个站模拟一遍加油和耗油判断，当不够耗油那么当前这条路的出发站不满足，重新遍历下一个出发站判断。
但其实可以把问题聚拢到一块看，比如往前走三站，每一站判当前总加油和当前总油耗，如果满足那么就能走完这三站，
反之，如果第三站刚好当前的总加油不够当前的总油耗，那么前三站里无论哪站做出发站，到此站都是不能通过的

所以如果当前站不通的话，直接跳过，从此站的下一站当做下一个出发站遍历判断即可，不是从原来的出发站的下一站重新判断。
这样的发算法从 O(n2) 降低到了O(n)，这个就是此题贪心的所在

'''


class Solution:
    def canCompleteCircuit(self, gas, cost) -> int:
        for i in range(len(gas)):
            remain = 0
            can = True
            for j in range(len(gas)):
                idx = (i + j) % len(gas)
                remain += gas[idx]
                if remain < cost[idx]:
                    can = False
                    break
                remain -= cost[idx]
            if can:
                return i
        return -1

    def canCompleteCircuit2(self, gas, cost) -> int:
        i = 0
        while i < len(gas):
            sumgas, sumcost = 0, 0
            j = 0
            can = True
            while j < len(gas):
                idx = (i + j) % len(gas)
                sumgas += gas[idx]
                sumcost += cost[idx]
                if sumgas < sumcost:
                    can = False
                    break
                j += 1
            if can:
                return i
            else:
                i += j + 1
        return -1


print(Solution().canCompleteCircuit2([1,2,3,4,5], [3,4,5,1,2]))